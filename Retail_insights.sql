-- How many customers are there in total?
select count(distinct customer_id) as total_customers from customer;


-- No. of customers from a specific country.
select customer_country , count(distinct customer_id) as no_of_customers 
from customer group by customer_country;


-- Details of the most expensive product.
select * from products where product_retail_price = (
select max(product_retail_price) from products);

------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- What is the average yearly income of customers by country?
select customer_country , avg(yearly_income) as avg_yearly_income 
from customer group by customer_country;


-- List all customers who have been account holders for more than 20 years.
with cte as (select *,datediff(now(),acct_open_date)/365 as total from customer) 
select customer_id,customer_acct_num,first_name,last_name,acct_open_date from cte where total>20;


-- Find customers who live in the same city as a specific store.
select c.customer_id, 
c.first_name , c.last_name , c.customer_city
from customer c , store s where
c.customer_city = s.store_city ;


------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- What is the total revenue generated by each product?
select p.product_name , round(sum(t.quantity*t.price),2) as total_revenue 
from transactions t inner join products p 
on t.product_id = p.product_id
group by p.product_name 
order by total_revenue desc;


-- Which product has the highest profit margin?
select p.product_name , 
sum(p.product_retail_price*t.quantity) - sum(p.product_cost*t.quantity)as profit_margin 
from products p inner join transactions t 
on p.product_id = t.product_id 
group by p.product_name 
order by profit_margin desc limit 1;


-- Identify the product categories (brands) that contribute the most to sales.
select product_brand from (
select p.product_brand as product_brand, 
sum(p.product_retail_price*t.quantity) as total_sales
from products p inner join transactions t 
on p.product_id = t.product_id 
group by p.product_brand
order by total_sales desc limit 2) as derived_table;

---------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Find customers with the highest transaction frequency.
select firstname , lastname , no_of_transactions
from 
(select c.first_name as firstname, 
c.last_name as lastname, 
count(t.customer_id) as no_of_transactions
from transactions t inner join customer c 
on t.customer_id = c.customer_id 
group by t.customer_id
order by no_of_transactions desc limit 5) as derived_table;


-- Segment customers based on their income (e.g., Low, Medium, High).
select first_name , last_name , yearly_income ,
case when yearly_income < 35000 then "Low" 
when yearly_income between 35000 and 80000 then "Medium"
when yearly_income > 80000 then "High" 
else "Very High" end as Customer_Segment
from customer;


-- What are the most common occupations of high-value customers?
select occupation , count(occupation) as count
from customer 
where yearly_income > 80000
group by occupation 
order by count desc;

----------------------------------------------------------------------------------------------------------------------------------------------------
-- Advanced Insights Queries

-- What is the profit contribution of each store to the total revenue?
select s.store_name,
sum(t.quantity*p.product_retail_price) - sum(t.quantity*p.product_cost) as profit_contribution 
from transactions t , products p , store s
where t.product_id = p.product_id and t.store_id=s.store_id
group by s.store_name
order by profit_contribution desc ;



-- Which store-product combinations generate the highest revenue?
select store_name ,
	   product_name ,
       max(revenue)
from 
(
	select s.store_name,
		   p.product_name,
           sum(t.quantity*p.product_retail_price) as revenue,
           dense_rank() over(partition by store_name order by sum(t.quantity*p.product_retail_price) desc) as storerank
           from transactions t
           inner join products p on t.product_id = p.product_id
           inner join store s on t.store_id = s.store_id 
           group by s.store_name , p.product_name 
) as derived
	where storerank=1
	group by store_name , product_name;



-- What is the return-to-sale ratio for each store?

with returns_values as 
( 
select store_id,
	   product_id,
       sum(quantity) as total_return_quantity 
from returns
group by store_id,product_id
),

transactions_values as 
(
select store_id , 
	   product_id,
       sum(quantity) as total_sold_quantity,
       sum(quantity*price) as total_sales_value
from transactions 
group by store_id,product_id
)

  
select t.store_id,
  
	   coalesce(sum(r.total_return_quantity * t.total_sales_value / t.total_sold_quantity),0) as total_returns_value,
     sum(t.total_sales_value) as total_sales_value,
     coalesce((sum(r.total_return_quantity * t.total_sales_value / t.total_sold_quantity) / sum(t.total_sales_value))*100,0) as return_to_sale_ratio
       
from transactions_values t left join returns_values r 
on t.store_id = r.store_id and t.product_id = r.product_id 
group by t.store_id;











